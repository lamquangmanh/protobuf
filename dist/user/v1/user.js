// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: user/v1/user.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CreateSuccess, DeleteSuccess, Filter, PaginationRequest, PaginationResponse, Sort, UpdateSuccess, } from "../../base/v1/base";
export const protobufPackage = "user.v1";
export var UserStatus;
(function (UserStatus) {
    UserStatus[UserStatus["ACTIVE"] = 0] = "ACTIVE";
    UserStatus[UserStatus["DEACTIVATED"] = 1] = "DEACTIVATED";
    UserStatus[UserStatus["DELETED"] = 2] = "DELETED";
    UserStatus[UserStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UserStatus || (UserStatus = {}));
export function userStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTIVE":
            return UserStatus.ACTIVE;
        case 1:
        case "DEACTIVATED":
            return UserStatus.DEACTIVATED;
        case 2:
        case "DELETED":
            return UserStatus.DELETED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UserStatus.UNRECOGNIZED;
    }
}
export function userStatusToJSON(object) {
    switch (object) {
        case UserStatus.ACTIVE:
            return "ACTIVE";
        case UserStatus.DEACTIVATED:
            return "DEACTIVATED";
        case UserStatus.DELETED:
            return "DELETED";
        case UserStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseUser() {
    return { userId: "", username: "", email: "", password: "", phone: "", avatar: "", status: 0 };
}
export const User = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.email !== "") {
            writer.uint32(26).string(message.email);
        }
        if (message.password !== "") {
            writer.uint32(34).string(message.password);
        }
        if (message.phone !== "") {
            writer.uint32(42).string(message.phone);
        }
        if (message.avatar !== "") {
            writer.uint32(50).string(message.avatar);
        }
        if (message.status !== 0) {
            writer.uint32(56).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            status: isSet(object.status) ? userStatusFromJSON(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.status !== 0) {
            obj.status = userStatusToJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return User.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUser();
        message.userId = object.userId ?? "";
        message.username = object.username ?? "";
        message.email = object.email ?? "";
        message.password = object.password ?? "";
        message.phone = object.phone ?? "";
        message.avatar = object.avatar ?? "";
        message.status = object.status ?? 0;
        return message;
    },
};
function createBaseGetUserRequest() {
    return { userId: "" };
}
export const GetUserRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return GetUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserRequest();
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseGetUsersRequest() {
    return { pagination: undefined, sort: [], filter: [] };
}
export const GetUsersRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        for (const v of message.sort) {
            Sort.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.filter) {
            Filter.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PaginationRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sort.push(Sort.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.filter.push(Filter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined,
            sort: globalThis.Array.isArray(object?.sort) ? object.sort.map((e) => Sort.fromJSON(e)) : [],
            filter: globalThis.Array.isArray(object?.filter) ? object.filter.map((e) => Filter.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PaginationRequest.toJSON(message.pagination);
        }
        if (message.sort?.length) {
            obj.sort = message.sort.map((e) => Sort.toJSON(e));
        }
        if (message.filter?.length) {
            obj.filter = message.filter.map((e) => Filter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetUsersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUsersRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PaginationRequest.fromPartial(object.pagination)
            : undefined;
        message.sort = object.sort?.map((e) => Sort.fromPartial(e)) || [];
        message.filter = object.filter?.map((e) => Filter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetUsersResponse() {
    return { pagination: undefined, data: [] };
}
export const GetUsersResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PaginationResponse.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        for (const v of message.data) {
            User.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PaginationResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(User.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
            data: globalThis.Array.isArray(object?.data) ? object.data.map((e) => User.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PaginationResponse.toJSON(message.pagination);
        }
        if (message.data?.length) {
            obj.data = message.data.map((e) => User.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetUsersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUsersResponse();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PaginationResponse.fromPartial(object.pagination)
            : undefined;
        message.data = object.data?.map((e) => User.fromPartial(e)) || [];
        return message;
    },
};
export const UserServiceServiceName = "user.v1.UserService";
export class UserServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || UserServiceServiceName;
        this.rpc = rpc;
        this.GetUser = this.GetUser.bind(this);
        this.GetUsers = this.GetUsers.bind(this);
        this.CreateUser = this.CreateUser.bind(this);
        this.UpdateUser = this.UpdateUser.bind(this);
        this.DeleteUser = this.DeleteUser.bind(this);
    }
    GetUser(request) {
        const data = GetUserRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetUser", data);
        return promise.then((data) => User.decode(new BinaryReader(data)));
    }
    GetUsers(request) {
        const data = GetUsersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetUsers", data);
        return promise.then((data) => GetUsersResponse.decode(new BinaryReader(data)));
    }
    CreateUser(request) {
        const data = User.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateUser", data);
        return promise.then((data) => CreateSuccess.decode(new BinaryReader(data)));
    }
    UpdateUser(request) {
        const data = User.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateUser", data);
        return promise.then((data) => UpdateSuccess.decode(new BinaryReader(data)));
    }
    DeleteUser(request) {
        const data = GetUserRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteUser", data);
        return promise.then((data) => DeleteSuccess.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
