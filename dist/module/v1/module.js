"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: module/v1/module.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleServiceClientImpl = exports.ModuleServiceServiceName = exports.CreateSuccess = exports.DeleteModuleRequest = exports.UpdateModuleRequest = exports.CreateModuleRequest = exports.GetModulesResponse = exports.GetModulesRequest = exports.GetModuleRequest = exports.CreateModuleData = exports.Module = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const base_1 = require("../../base/v1/base");
exports.protobufPackage = "module.v1";
function createBaseModule() {
    return { moduleId: "", name: "", description: "" };
}
exports.Module = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.moduleId !== "") {
            writer.uint32(10).string(message.moduleId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.moduleId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            moduleId: isSet(object.moduleId) ? globalThis.String(object.moduleId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.moduleId !== "") {
            obj.moduleId = message.moduleId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.Module.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModule();
        message.moduleId = object.moduleId ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseCreateModuleData() {
    return { name: "", description: "" };
}
exports.CreateModuleData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateModuleData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.CreateModuleData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateModuleData();
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseGetModuleRequest() {
    return { moduleId: "" };
}
exports.GetModuleRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.moduleId !== "") {
            writer.uint32(10).string(message.moduleId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetModuleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.moduleId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { moduleId: isSet(object.moduleId) ? globalThis.String(object.moduleId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.moduleId !== "") {
            obj.moduleId = message.moduleId;
        }
        return obj;
    },
    create(base) {
        return exports.GetModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetModuleRequest();
        message.moduleId = object.moduleId ?? "";
        return message;
    },
};
function createBaseGetModulesRequest() {
    return { pagination: undefined, sort: [], filter: [] };
}
exports.GetModulesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            base_1.PaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        for (const v of message.sort) {
            base_1.Sort.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.filter) {
            base_1.Filter.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetModulesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = base_1.PaginationRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sort.push(base_1.Sort.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.filter.push(base_1.Filter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? base_1.PaginationRequest.fromJSON(object.pagination) : undefined,
            sort: globalThis.Array.isArray(object?.sort) ? object.sort.map((e) => base_1.Sort.fromJSON(e)) : [],
            filter: globalThis.Array.isArray(object?.filter) ? object.filter.map((e) => base_1.Filter.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = base_1.PaginationRequest.toJSON(message.pagination);
        }
        if (message.sort?.length) {
            obj.sort = message.sort.map((e) => base_1.Sort.toJSON(e));
        }
        if (message.filter?.length) {
            obj.filter = message.filter.map((e) => base_1.Filter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetModulesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetModulesRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? base_1.PaginationRequest.fromPartial(object.pagination)
            : undefined;
        message.sort = object.sort?.map((e) => base_1.Sort.fromPartial(e)) || [];
        message.filter = object.filter?.map((e) => base_1.Filter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetModulesResponse() {
    return { pagination: undefined, data: [] };
}
exports.GetModulesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pagination !== undefined) {
            base_1.PaginationResponse.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        for (const v of message.data) {
            exports.Module.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetModulesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = base_1.PaginationResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(exports.Module.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? base_1.PaginationResponse.fromJSON(object.pagination) : undefined,
            data: globalThis.Array.isArray(object?.data) ? object.data.map((e) => exports.Module.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = base_1.PaginationResponse.toJSON(message.pagination);
        }
        if (message.data?.length) {
            obj.data = message.data.map((e) => exports.Module.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetModulesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetModulesResponse();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? base_1.PaginationResponse.fromPartial(object.pagination)
            : undefined;
        message.data = object.data?.map((e) => exports.Module.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateModuleRequest() {
    return { module: undefined, userId: "" };
}
exports.CreateModuleRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.module !== undefined) {
            exports.CreateModuleData.encode(message.module, writer.uint32(10).fork()).join();
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateModuleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.module = exports.CreateModuleData.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? exports.CreateModuleData.fromJSON(object.module) : undefined,
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.module !== undefined) {
            obj.module = exports.CreateModuleData.toJSON(message.module);
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.CreateModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateModuleRequest();
        message.module = (object.module !== undefined && object.module !== null)
            ? exports.CreateModuleData.fromPartial(object.module)
            : undefined;
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseUpdateModuleRequest() {
    return { module: undefined, userId: "" };
}
exports.UpdateModuleRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.module !== undefined) {
            exports.Module.encode(message.module, writer.uint32(10).fork()).join();
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateModuleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.module = exports.Module.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? exports.Module.fromJSON(object.module) : undefined,
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.module !== undefined) {
            obj.module = exports.Module.toJSON(message.module);
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateModuleRequest();
        message.module = (object.module !== undefined && object.module !== null)
            ? exports.Module.fromPartial(object.module)
            : undefined;
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseDeleteModuleRequest() {
    return { moduleId: "", userId: "" };
}
exports.DeleteModuleRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.moduleId !== "") {
            writer.uint32(10).string(message.moduleId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteModuleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.moduleId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            moduleId: isSet(object.moduleId) ? globalThis.String(object.moduleId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.moduleId !== "") {
            obj.moduleId = message.moduleId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteModuleRequest();
        message.moduleId = object.moduleId ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseCreateSuccess() {
    return { module: undefined, error: undefined };
}
exports.CreateSuccess = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.module !== undefined) {
            exports.Module.encode(message.module, writer.uint32(10).fork()).join();
        }
        if (message.error !== undefined) {
            base_1.ErrorResponse.encode(message.error, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateSuccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.module = exports.Module.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.error = base_1.ErrorResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? exports.Module.fromJSON(object.module) : undefined,
            error: isSet(object.error) ? base_1.ErrorResponse.fromJSON(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.module !== undefined) {
            obj.module = exports.Module.toJSON(message.module);
        }
        if (message.error !== undefined) {
            obj.error = base_1.ErrorResponse.toJSON(message.error);
        }
        return obj;
    },
    create(base) {
        return exports.CreateSuccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateSuccess();
        message.module = (object.module !== undefined && object.module !== null)
            ? exports.Module.fromPartial(object.module)
            : undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? base_1.ErrorResponse.fromPartial(object.error)
            : undefined;
        return message;
    },
};
exports.ModuleServiceServiceName = "module.v1.ModuleService";
class ModuleServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.ModuleServiceServiceName;
        this.rpc = rpc;
        this.GetModule = this.GetModule.bind(this);
        this.GetModules = this.GetModules.bind(this);
        this.CreateModule = this.CreateModule.bind(this);
        this.UpdateModule = this.UpdateModule.bind(this);
        this.DeleteModule = this.DeleteModule.bind(this);
    }
    GetModule(request) {
        const data = exports.GetModuleRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetModule", data);
        return promise.then((data) => exports.Module.decode(new wire_1.BinaryReader(data)));
    }
    GetModules(request) {
        const data = exports.GetModulesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetModules", data);
        return promise.then((data) => exports.GetModulesResponse.decode(new wire_1.BinaryReader(data)));
    }
    CreateModule(request) {
        const data = exports.CreateModuleRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateModule", data);
        return promise.then((data) => exports.CreateSuccess.decode(new wire_1.BinaryReader(data)));
    }
    UpdateModule(request) {
        const data = exports.UpdateModuleRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateModule", data);
        return promise.then((data) => base_1.UpdateSuccess.decode(new wire_1.BinaryReader(data)));
    }
    DeleteModule(request) {
        const data = exports.DeleteModuleRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteModule", data);
        return promise.then((data) => base_1.DeleteSuccess.decode(new wire_1.BinaryReader(data)));
    }
}
exports.ModuleServiceClientImpl = ModuleServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
