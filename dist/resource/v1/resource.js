// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: resource/v1/resource.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CreateSuccess, DeleteSuccess, Filter, PaginationRequest, PaginationResponse, Sort, UpdateSuccess, } from "../../base/v1/base";
export const protobufPackage = "resource.v1";
function createBaseResource() {
    return { resourceId: "", name: "", moduleId: "" };
}
export const Resource = {
    encode(message, writer = new BinaryWriter()) {
        if (message.resourceId !== "") {
            writer.uint32(10).string(message.resourceId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.moduleId !== "") {
            writer.uint32(26).string(message.moduleId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.resourceId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.moduleId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            moduleId: isSet(object.moduleId) ? globalThis.String(object.moduleId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.resourceId !== "") {
            obj.resourceId = message.resourceId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.moduleId !== "") {
            obj.moduleId = message.moduleId;
        }
        return obj;
    },
    create(base) {
        return Resource.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResource();
        message.resourceId = object.resourceId ?? "";
        message.name = object.name ?? "";
        message.moduleId = object.moduleId ?? "";
        return message;
    },
};
function createBaseGetResourceRequest() {
    return { resourceId: "" };
}
export const GetResourceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.resourceId !== "") {
            writer.uint32(10).string(message.resourceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetResourceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.resourceId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.resourceId !== "") {
            obj.resourceId = message.resourceId;
        }
        return obj;
    },
    create(base) {
        return GetResourceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetResourceRequest();
        message.resourceId = object.resourceId ?? "";
        return message;
    },
};
function createBaseGetResourcesRequest() {
    return { pagination: undefined, sort: [], filter: [] };
}
export const GetResourcesRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        for (const v of message.sort) {
            Sort.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.filter) {
            Filter.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetResourcesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PaginationRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sort.push(Sort.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.filter.push(Filter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined,
            sort: globalThis.Array.isArray(object?.sort) ? object.sort.map((e) => Sort.fromJSON(e)) : [],
            filter: globalThis.Array.isArray(object?.filter) ? object.filter.map((e) => Filter.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PaginationRequest.toJSON(message.pagination);
        }
        if (message.sort?.length) {
            obj.sort = message.sort.map((e) => Sort.toJSON(e));
        }
        if (message.filter?.length) {
            obj.filter = message.filter.map((e) => Filter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetResourcesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetResourcesRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PaginationRequest.fromPartial(object.pagination)
            : undefined;
        message.sort = object.sort?.map((e) => Sort.fromPartial(e)) || [];
        message.filter = object.filter?.map((e) => Filter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetResourcesResponse() {
    return { pagination: undefined, data: [] };
}
export const GetResourcesResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PaginationResponse.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        for (const v of message.data) {
            Resource.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetResourcesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PaginationResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data.push(Resource.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
            data: globalThis.Array.isArray(object?.data) ? object.data.map((e) => Resource.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PaginationResponse.toJSON(message.pagination);
        }
        if (message.data?.length) {
            obj.data = message.data.map((e) => Resource.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetResourcesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetResourcesResponse();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PaginationResponse.fromPartial(object.pagination)
            : undefined;
        message.data = object.data?.map((e) => Resource.fromPartial(e)) || [];
        return message;
    },
};
export const ResourceServiceServiceName = "resource.v1.ResourceService";
export class ResourceServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ResourceServiceServiceName;
        this.rpc = rpc;
        this.GetResource = this.GetResource.bind(this);
        this.GetResources = this.GetResources.bind(this);
        this.CreateResource = this.CreateResource.bind(this);
        this.UpdateResource = this.UpdateResource.bind(this);
        this.DeleteResource = this.DeleteResource.bind(this);
    }
    GetResource(request) {
        const data = GetResourceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetResource", data);
        return promise.then((data) => Resource.decode(new BinaryReader(data)));
    }
    GetResources(request) {
        const data = GetResourcesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetResources", data);
        return promise.then((data) => GetResourcesResponse.decode(new BinaryReader(data)));
    }
    CreateResource(request) {
        const data = Resource.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateResource", data);
        return promise.then((data) => CreateSuccess.decode(new BinaryReader(data)));
    }
    UpdateResource(request) {
        const data = Resource.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateResource", data);
        return promise.then((data) => UpdateSuccess.decode(new BinaryReader(data)));
    }
    DeleteResource(request) {
        const data = GetResourceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteResource", data);
        return promise.then((data) => DeleteSuccess.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
