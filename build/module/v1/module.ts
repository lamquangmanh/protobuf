// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: module/v1/module.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  DeleteSuccess,
  ErrorResponse,
  Filter,
  PaginationRequest,
  PaginationResponse,
  Sort,
  UpdateSuccess,
} from "../../base/v1/base";

export const protobufPackage = "module.v1";

export interface Module {
  moduleId: string;
  name: string;
  description: string;
  createdAt: string;
  createdUserId: string;
  updatedAt: string;
  updatedUserId: string;
  deletedAt: string;
  deletedUserId: string;
}

export interface CreateModuleData {
  name: string;
  description: string;
}

export interface GetModuleRequest {
  moduleId: string;
}

export interface GetModulesRequest {
  pagination: PaginationRequest | undefined;
  sorts: Sort[];
  filters: Filter[];
}

export interface GetModulesResponse {
  pagination: PaginationResponse | undefined;
  data: Module[];
}

export interface CreateModuleRequest {
  module: CreateModuleData | undefined;
  userId: string;
}

export interface UpdateModuleRequest {
  module: Module | undefined;
  userId: string;
}

export interface DeleteModuleRequest {
  moduleId: string;
  userId: string;
}

export interface CreateSuccess {
  module?: Module | undefined;
  error?: ErrorResponse | undefined;
}

function createBaseModule(): Module {
  return {
    moduleId: "",
    name: "",
    description: "",
    createdAt: "",
    createdUserId: "",
    updatedAt: "",
    updatedUserId: "",
    deletedAt: "",
    deletedUserId: "",
  };
}

export const Module: MessageFns<Module> = {
  encode(message: Module, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moduleId !== "") {
      writer.uint32(10).string(message.moduleId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.createdUserId !== "") {
      writer.uint32(42).string(message.createdUserId);
    }
    if (message.updatedAt !== "") {
      writer.uint32(50).string(message.updatedAt);
    }
    if (message.updatedUserId !== "") {
      writer.uint32(58).string(message.updatedUserId);
    }
    if (message.deletedAt !== "") {
      writer.uint32(66).string(message.deletedAt);
    }
    if (message.deletedUserId !== "") {
      writer.uint32(74).string(message.deletedUserId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Module {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.moduleId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdUserId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedUserId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.deletedUserId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Module {
    return {
      moduleId: isSet(object.moduleId) ? globalThis.String(object.moduleId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      createdUserId: isSet(object.createdUserId) ? globalThis.String(object.createdUserId) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      updatedUserId: isSet(object.updatedUserId) ? globalThis.String(object.updatedUserId) : "",
      deletedAt: isSet(object.deletedAt) ? globalThis.String(object.deletedAt) : "",
      deletedUserId: isSet(object.deletedUserId) ? globalThis.String(object.deletedUserId) : "",
    };
  },

  toJSON(message: Module): unknown {
    const obj: any = {};
    if (message.moduleId !== "") {
      obj.moduleId = message.moduleId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.createdUserId !== "") {
      obj.createdUserId = message.createdUserId;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.updatedUserId !== "") {
      obj.updatedUserId = message.updatedUserId;
    }
    if (message.deletedAt !== "") {
      obj.deletedAt = message.deletedAt;
    }
    if (message.deletedUserId !== "") {
      obj.deletedUserId = message.deletedUserId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Module>, I>>(base?: I): Module {
    return Module.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Module>, I>>(object: I): Module {
    const message = createBaseModule();
    message.moduleId = object.moduleId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.createdUserId = object.createdUserId ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.updatedUserId = object.updatedUserId ?? "";
    message.deletedAt = object.deletedAt ?? "";
    message.deletedUserId = object.deletedUserId ?? "";
    return message;
  },
};

function createBaseCreateModuleData(): CreateModuleData {
  return { name: "", description: "" };
}

export const CreateModuleData: MessageFns<CreateModuleData> = {
  encode(message: CreateModuleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModuleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModuleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModuleData {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateModuleData): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateModuleData>, I>>(base?: I): CreateModuleData {
    return CreateModuleData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateModuleData>, I>>(object: I): CreateModuleData {
    const message = createBaseCreateModuleData();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseGetModuleRequest(): GetModuleRequest {
  return { moduleId: "" };
}

export const GetModuleRequest: MessageFns<GetModuleRequest> = {
  encode(message: GetModuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moduleId !== "") {
      writer.uint32(10).string(message.moduleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.moduleId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModuleRequest {
    return { moduleId: isSet(object.moduleId) ? globalThis.String(object.moduleId) : "" };
  },

  toJSON(message: GetModuleRequest): unknown {
    const obj: any = {};
    if (message.moduleId !== "") {
      obj.moduleId = message.moduleId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetModuleRequest>, I>>(base?: I): GetModuleRequest {
    return GetModuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetModuleRequest>, I>>(object: I): GetModuleRequest {
    const message = createBaseGetModuleRequest();
    message.moduleId = object.moduleId ?? "";
    return message;
  },
};

function createBaseGetModulesRequest(): GetModulesRequest {
  return { pagination: undefined, sorts: [], filters: [] };
}

export const GetModulesRequest: MessageFns<GetModulesRequest> = {
  encode(message: GetModulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    for (const v of message.sorts) {
      Sort.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.filters) {
      Filter.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PaginationRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sorts.push(Sort.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filters.push(Filter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModulesRequest {
    return {
      pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined,
      sorts: globalThis.Array.isArray(object?.sorts) ? object.sorts.map((e: any) => Sort.fromJSON(e)) : [],
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => Filter.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetModulesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PaginationRequest.toJSON(message.pagination);
    }
    if (message.sorts?.length) {
      obj.sorts = message.sorts.map((e) => Sort.toJSON(e));
    }
    if (message.filters?.length) {
      obj.filters = message.filters.map((e) => Filter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetModulesRequest>, I>>(base?: I): GetModulesRequest {
    return GetModulesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetModulesRequest>, I>>(object: I): GetModulesRequest {
    const message = createBaseGetModulesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationRequest.fromPartial(object.pagination)
      : undefined;
    message.sorts = object.sorts?.map((e) => Sort.fromPartial(e)) || [];
    message.filters = object.filters?.map((e) => Filter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetModulesResponse(): GetModulesResponse {
  return { pagination: undefined, data: [] };
}

export const GetModulesResponse: MessageFns<GetModulesResponse> = {
  encode(message: GetModulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    for (const v of message.data) {
      Module.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data.push(Module.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModulesResponse {
    return {
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Module.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetModulesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Module.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetModulesResponse>, I>>(base?: I): GetModulesResponse {
    return GetModulesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetModulesResponse>, I>>(object: I): GetModulesResponse {
    const message = createBaseGetModulesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    message.data = object.data?.map((e) => Module.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateModuleRequest(): CreateModuleRequest {
  return { module: undefined, userId: "" };
}

export const CreateModuleRequest: MessageFns<CreateModuleRequest> = {
  encode(message: CreateModuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.module !== undefined) {
      CreateModuleData.encode(message.module, writer.uint32(10).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.module = CreateModuleData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModuleRequest {
    return {
      module: isSet(object.module) ? CreateModuleData.fromJSON(object.module) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CreateModuleRequest): unknown {
    const obj: any = {};
    if (message.module !== undefined) {
      obj.module = CreateModuleData.toJSON(message.module);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateModuleRequest>, I>>(base?: I): CreateModuleRequest {
    return CreateModuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateModuleRequest>, I>>(object: I): CreateModuleRequest {
    const message = createBaseCreateModuleRequest();
    message.module = (object.module !== undefined && object.module !== null)
      ? CreateModuleData.fromPartial(object.module)
      : undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseUpdateModuleRequest(): UpdateModuleRequest {
  return { module: undefined, userId: "" };
}

export const UpdateModuleRequest: MessageFns<UpdateModuleRequest> = {
  encode(message: UpdateModuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.module !== undefined) {
      Module.encode(message.module, writer.uint32(10).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.module = Module.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModuleRequest {
    return {
      module: isSet(object.module) ? Module.fromJSON(object.module) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: UpdateModuleRequest): unknown {
    const obj: any = {};
    if (message.module !== undefined) {
      obj.module = Module.toJSON(message.module);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateModuleRequest>, I>>(base?: I): UpdateModuleRequest {
    return UpdateModuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateModuleRequest>, I>>(object: I): UpdateModuleRequest {
    const message = createBaseUpdateModuleRequest();
    message.module = (object.module !== undefined && object.module !== null)
      ? Module.fromPartial(object.module)
      : undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseDeleteModuleRequest(): DeleteModuleRequest {
  return { moduleId: "", userId: "" };
}

export const DeleteModuleRequest: MessageFns<DeleteModuleRequest> = {
  encode(message: DeleteModuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moduleId !== "") {
      writer.uint32(10).string(message.moduleId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.moduleId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteModuleRequest {
    return {
      moduleId: isSet(object.moduleId) ? globalThis.String(object.moduleId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: DeleteModuleRequest): unknown {
    const obj: any = {};
    if (message.moduleId !== "") {
      obj.moduleId = message.moduleId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteModuleRequest>, I>>(base?: I): DeleteModuleRequest {
    return DeleteModuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteModuleRequest>, I>>(object: I): DeleteModuleRequest {
    const message = createBaseDeleteModuleRequest();
    message.moduleId = object.moduleId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCreateSuccess(): CreateSuccess {
  return { module: undefined, error: undefined };
}

export const CreateSuccess: MessageFns<CreateSuccess> = {
  encode(message: CreateSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.module !== undefined) {
      Module.encode(message.module, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorResponse.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.module = Module.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = ErrorResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSuccess {
    return {
      module: isSet(object.module) ? Module.fromJSON(object.module) : undefined,
      error: isSet(object.error) ? ErrorResponse.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: CreateSuccess): unknown {
    const obj: any = {};
    if (message.module !== undefined) {
      obj.module = Module.toJSON(message.module);
    }
    if (message.error !== undefined) {
      obj.error = ErrorResponse.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSuccess>, I>>(base?: I): CreateSuccess {
    return CreateSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSuccess>, I>>(object: I): CreateSuccess {
    const message = createBaseCreateSuccess();
    message.module = (object.module !== undefined && object.module !== null)
      ? Module.fromPartial(object.module)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorResponse.fromPartial(object.error)
      : undefined;
    return message;
  },
};

export interface ModuleService {
  GetModule(request: GetModuleRequest): Promise<Module>;
  GetModules(request: GetModulesRequest): Promise<GetModulesResponse>;
  CreateModule(request: CreateModuleRequest): Promise<CreateSuccess>;
  UpdateModule(request: UpdateModuleRequest): Promise<UpdateSuccess>;
  DeleteModule(request: DeleteModuleRequest): Promise<DeleteSuccess>;
}

export const ModuleServiceServiceName = "module.v1.ModuleService";
export class ModuleServiceClientImpl implements ModuleService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ModuleServiceServiceName;
    this.rpc = rpc;
    this.GetModule = this.GetModule.bind(this);
    this.GetModules = this.GetModules.bind(this);
    this.CreateModule = this.CreateModule.bind(this);
    this.UpdateModule = this.UpdateModule.bind(this);
    this.DeleteModule = this.DeleteModule.bind(this);
  }
  GetModule(request: GetModuleRequest): Promise<Module> {
    const data = GetModuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetModule", data);
    return promise.then((data) => Module.decode(new BinaryReader(data)));
  }

  GetModules(request: GetModulesRequest): Promise<GetModulesResponse> {
    const data = GetModulesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetModules", data);
    return promise.then((data) => GetModulesResponse.decode(new BinaryReader(data)));
  }

  CreateModule(request: CreateModuleRequest): Promise<CreateSuccess> {
    const data = CreateModuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateModule", data);
    return promise.then((data) => CreateSuccess.decode(new BinaryReader(data)));
  }

  UpdateModule(request: UpdateModuleRequest): Promise<UpdateSuccess> {
    const data = UpdateModuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateModule", data);
    return promise.then((data) => UpdateSuccess.decode(new BinaryReader(data)));
  }

  DeleteModule(request: DeleteModuleRequest): Promise<DeleteSuccess> {
    const data = DeleteModuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteModule", data);
    return promise.then((data) => DeleteSuccess.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
