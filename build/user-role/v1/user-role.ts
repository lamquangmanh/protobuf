// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: user-role/v1/user-role.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  DeleteSuccess,
  ErrorResponse,
  Filter,
  PaginationRequest,
  PaginationResponse,
  Sort,
  UpdateSuccess,
} from "../../base/v1/base";

export const protobufPackage = "user_role.v1";

export interface UserRole {
  userRoleId: string;
  userId: string;
  roleId: string;
  createdUserId: string;
  updatedAt: string;
  updatedUserId: string;
  deletedAt: string;
  deletedUserId: string;
  createdAt: string;
}

export interface CreateUserRoleData {
  userId: string;
  roleId: string;
}

export interface UpdateUserRoleData {
  userId: string;
  roleId: string;
}

export interface GetUserRoleRequest {
  userRoleId: string;
}

export interface GetUserRolesRequest {
  pagination: PaginationRequest | undefined;
  sorts: Sort[];
  filters: Filter[];
}

export interface GetUserRolesResponse {
  pagination: PaginationResponse | undefined;
  data: UserRole[];
}

export interface CreateUserRoleRequest {
  userRole: CreateUserRoleData | undefined;
  userId: string;
}

export interface UpdateUserRoleRequest {
  userRole: UpdateUserRoleData | undefined;
  userId: string;
}

export interface DeleteUserRoleRequest {
  userRoleId: string;
  userId: string;
}

export interface CreateSuccess {
  userRole?: UserRole | undefined;
  error?: ErrorResponse | undefined;
}

function createBaseUserRole(): UserRole {
  return {
    userRoleId: "",
    userId: "",
    roleId: "",
    createdUserId: "",
    updatedAt: "",
    updatedUserId: "",
    deletedAt: "",
    deletedUserId: "",
    createdAt: "",
  };
}

export const UserRole: MessageFns<UserRole> = {
  encode(message: UserRole, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userRoleId !== "") {
      writer.uint32(10).string(message.userRoleId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.roleId !== "") {
      writer.uint32(26).string(message.roleId);
    }
    if (message.createdUserId !== "") {
      writer.uint32(34).string(message.createdUserId);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    if (message.updatedUserId !== "") {
      writer.uint32(50).string(message.updatedUserId);
    }
    if (message.deletedAt !== "") {
      writer.uint32(58).string(message.deletedAt);
    }
    if (message.deletedUserId !== "") {
      writer.uint32(66).string(message.deletedUserId);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserRole {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userRoleId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdUserId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedUserId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.deletedUserId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRole {
    return {
      userRoleId: isSet(object.userRoleId) ? globalThis.String(object.userRoleId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
      createdUserId: isSet(object.createdUserId) ? globalThis.String(object.createdUserId) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      updatedUserId: isSet(object.updatedUserId) ? globalThis.String(object.updatedUserId) : "",
      deletedAt: isSet(object.deletedAt) ? globalThis.String(object.deletedAt) : "",
      deletedUserId: isSet(object.deletedUserId) ? globalThis.String(object.deletedUserId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: UserRole): unknown {
    const obj: any = {};
    if (message.userRoleId !== "") {
      obj.userRoleId = message.userRoleId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    if (message.createdUserId !== "") {
      obj.createdUserId = message.createdUserId;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.updatedUserId !== "") {
      obj.updatedUserId = message.updatedUserId;
    }
    if (message.deletedAt !== "") {
      obj.deletedAt = message.deletedAt;
    }
    if (message.deletedUserId !== "") {
      obj.deletedUserId = message.deletedUserId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRole>, I>>(base?: I): UserRole {
    return UserRole.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRole>, I>>(object: I): UserRole {
    const message = createBaseUserRole();
    message.userRoleId = object.userRoleId ?? "";
    message.userId = object.userId ?? "";
    message.roleId = object.roleId ?? "";
    message.createdUserId = object.createdUserId ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.updatedUserId = object.updatedUserId ?? "";
    message.deletedAt = object.deletedAt ?? "";
    message.deletedUserId = object.deletedUserId ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseCreateUserRoleData(): CreateUserRoleData {
  return { userId: "", roleId: "" };
}

export const CreateUserRoleData: MessageFns<CreateUserRoleData> = {
  encode(message: CreateUserRoleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.roleId !== "") {
      writer.uint32(18).string(message.roleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRoleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRoleData {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
    };
  },

  toJSON(message: CreateUserRoleData): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRoleData>, I>>(base?: I): CreateUserRoleData {
    return CreateUserRoleData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRoleData>, I>>(object: I): CreateUserRoleData {
    const message = createBaseCreateUserRoleData();
    message.userId = object.userId ?? "";
    message.roleId = object.roleId ?? "";
    return message;
  },
};

function createBaseUpdateUserRoleData(): UpdateUserRoleData {
  return { userId: "", roleId: "" };
}

export const UpdateUserRoleData: MessageFns<UpdateUserRoleData> = {
  encode(message: UpdateUserRoleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.roleId !== "") {
      writer.uint32(18).string(message.roleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRoleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRoleData {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
    };
  },

  toJSON(message: UpdateUserRoleData): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserRoleData>, I>>(base?: I): UpdateUserRoleData {
    return UpdateUserRoleData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserRoleData>, I>>(object: I): UpdateUserRoleData {
    const message = createBaseUpdateUserRoleData();
    message.userId = object.userId ?? "";
    message.roleId = object.roleId ?? "";
    return message;
  },
};

function createBaseGetUserRoleRequest(): GetUserRoleRequest {
  return { userRoleId: "" };
}

export const GetUserRoleRequest: MessageFns<GetUserRoleRequest> = {
  encode(message: GetUserRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userRoleId !== "") {
      writer.uint32(10).string(message.userRoleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userRoleId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRoleRequest {
    return { userRoleId: isSet(object.userRoleId) ? globalThis.String(object.userRoleId) : "" };
  },

  toJSON(message: GetUserRoleRequest): unknown {
    const obj: any = {};
    if (message.userRoleId !== "") {
      obj.userRoleId = message.userRoleId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRoleRequest>, I>>(base?: I): GetUserRoleRequest {
    return GetUserRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRoleRequest>, I>>(object: I): GetUserRoleRequest {
    const message = createBaseGetUserRoleRequest();
    message.userRoleId = object.userRoleId ?? "";
    return message;
  },
};

function createBaseGetUserRolesRequest(): GetUserRolesRequest {
  return { pagination: undefined, sorts: [], filters: [] };
}

export const GetUserRolesRequest: MessageFns<GetUserRolesRequest> = {
  encode(message: GetUserRolesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    for (const v of message.sorts) {
      Sort.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.filters) {
      Filter.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRolesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PaginationRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sorts.push(Sort.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filters.push(Filter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRolesRequest {
    return {
      pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined,
      sorts: globalThis.Array.isArray(object?.sorts) ? object.sorts.map((e: any) => Sort.fromJSON(e)) : [],
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => Filter.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetUserRolesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PaginationRequest.toJSON(message.pagination);
    }
    if (message.sorts?.length) {
      obj.sorts = message.sorts.map((e) => Sort.toJSON(e));
    }
    if (message.filters?.length) {
      obj.filters = message.filters.map((e) => Filter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRolesRequest>, I>>(base?: I): GetUserRolesRequest {
    return GetUserRolesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRolesRequest>, I>>(object: I): GetUserRolesRequest {
    const message = createBaseGetUserRolesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationRequest.fromPartial(object.pagination)
      : undefined;
    message.sorts = object.sorts?.map((e) => Sort.fromPartial(e)) || [];
    message.filters = object.filters?.map((e) => Filter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUserRolesResponse(): GetUserRolesResponse {
  return { pagination: undefined, data: [] };
}

export const GetUserRolesResponse: MessageFns<GetUserRolesResponse> = {
  encode(message: GetUserRolesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    for (const v of message.data) {
      UserRole.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRolesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data.push(UserRole.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRolesResponse {
    return {
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => UserRole.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetUserRolesResponse): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => UserRole.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRolesResponse>, I>>(base?: I): GetUserRolesResponse {
    return GetUserRolesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRolesResponse>, I>>(object: I): GetUserRolesResponse {
    const message = createBaseGetUserRolesResponse();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    message.data = object.data?.map((e) => UserRole.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateUserRoleRequest(): CreateUserRoleRequest {
  return { userRole: undefined, userId: "" };
}

export const CreateUserRoleRequest: MessageFns<CreateUserRoleRequest> = {
  encode(message: CreateUserRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userRole !== undefined) {
      CreateUserRoleData.encode(message.userRole, writer.uint32(10).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userRole = CreateUserRoleData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRoleRequest {
    return {
      userRole: isSet(object.userRole) ? CreateUserRoleData.fromJSON(object.userRole) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CreateUserRoleRequest): unknown {
    const obj: any = {};
    if (message.userRole !== undefined) {
      obj.userRole = CreateUserRoleData.toJSON(message.userRole);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRoleRequest>, I>>(base?: I): CreateUserRoleRequest {
    return CreateUserRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRoleRequest>, I>>(object: I): CreateUserRoleRequest {
    const message = createBaseCreateUserRoleRequest();
    message.userRole = (object.userRole !== undefined && object.userRole !== null)
      ? CreateUserRoleData.fromPartial(object.userRole)
      : undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseUpdateUserRoleRequest(): UpdateUserRoleRequest {
  return { userRole: undefined, userId: "" };
}

export const UpdateUserRoleRequest: MessageFns<UpdateUserRoleRequest> = {
  encode(message: UpdateUserRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userRole !== undefined) {
      UpdateUserRoleData.encode(message.userRole, writer.uint32(10).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userRole = UpdateUserRoleData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRoleRequest {
    return {
      userRole: isSet(object.userRole) ? UpdateUserRoleData.fromJSON(object.userRole) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: UpdateUserRoleRequest): unknown {
    const obj: any = {};
    if (message.userRole !== undefined) {
      obj.userRole = UpdateUserRoleData.toJSON(message.userRole);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserRoleRequest>, I>>(base?: I): UpdateUserRoleRequest {
    return UpdateUserRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserRoleRequest>, I>>(object: I): UpdateUserRoleRequest {
    const message = createBaseUpdateUserRoleRequest();
    message.userRole = (object.userRole !== undefined && object.userRole !== null)
      ? UpdateUserRoleData.fromPartial(object.userRole)
      : undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseDeleteUserRoleRequest(): DeleteUserRoleRequest {
  return { userRoleId: "", userId: "" };
}

export const DeleteUserRoleRequest: MessageFns<DeleteUserRoleRequest> = {
  encode(message: DeleteUserRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userRoleId !== "") {
      writer.uint32(10).string(message.userRoleId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userRoleId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserRoleRequest {
    return {
      userRoleId: isSet(object.userRoleId) ? globalThis.String(object.userRoleId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: DeleteUserRoleRequest): unknown {
    const obj: any = {};
    if (message.userRoleId !== "") {
      obj.userRoleId = message.userRoleId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserRoleRequest>, I>>(base?: I): DeleteUserRoleRequest {
    return DeleteUserRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserRoleRequest>, I>>(object: I): DeleteUserRoleRequest {
    const message = createBaseDeleteUserRoleRequest();
    message.userRoleId = object.userRoleId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCreateSuccess(): CreateSuccess {
  return { userRole: undefined, error: undefined };
}

export const CreateSuccess: MessageFns<CreateSuccess> = {
  encode(message: CreateSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userRole !== undefined) {
      UserRole.encode(message.userRole, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      ErrorResponse.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userRole = UserRole.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = ErrorResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSuccess {
    return {
      userRole: isSet(object.userRole) ? UserRole.fromJSON(object.userRole) : undefined,
      error: isSet(object.error) ? ErrorResponse.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: CreateSuccess): unknown {
    const obj: any = {};
    if (message.userRole !== undefined) {
      obj.userRole = UserRole.toJSON(message.userRole);
    }
    if (message.error !== undefined) {
      obj.error = ErrorResponse.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSuccess>, I>>(base?: I): CreateSuccess {
    return CreateSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSuccess>, I>>(object: I): CreateSuccess {
    const message = createBaseCreateSuccess();
    message.userRole = (object.userRole !== undefined && object.userRole !== null)
      ? UserRole.fromPartial(object.userRole)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorResponse.fromPartial(object.error)
      : undefined;
    return message;
  },
};

export interface UserRoleService {
  GetUserRole(request: GetUserRoleRequest): Promise<UserRole>;
  GetUserRoles(request: GetUserRolesRequest): Promise<GetUserRolesRequest>;
  CreateUserRole(request: CreateUserRoleRequest): Promise<CreateSuccess>;
  UpdateUserRole(request: UpdateUserRoleRequest): Promise<UpdateSuccess>;
  DeleteUserRole(request: DeleteUserRoleRequest): Promise<DeleteSuccess>;
}

export const UserRoleServiceServiceName = "user_role.v1.UserRoleService";
export class UserRoleServiceClientImpl implements UserRoleService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserRoleServiceServiceName;
    this.rpc = rpc;
    this.GetUserRole = this.GetUserRole.bind(this);
    this.GetUserRoles = this.GetUserRoles.bind(this);
    this.CreateUserRole = this.CreateUserRole.bind(this);
    this.UpdateUserRole = this.UpdateUserRole.bind(this);
    this.DeleteUserRole = this.DeleteUserRole.bind(this);
  }
  GetUserRole(request: GetUserRoleRequest): Promise<UserRole> {
    const data = GetUserRoleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserRole", data);
    return promise.then((data) => UserRole.decode(new BinaryReader(data)));
  }

  GetUserRoles(request: GetUserRolesRequest): Promise<GetUserRolesRequest> {
    const data = GetUserRolesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserRoles", data);
    return promise.then((data) => GetUserRolesRequest.decode(new BinaryReader(data)));
  }

  CreateUserRole(request: CreateUserRoleRequest): Promise<CreateSuccess> {
    const data = CreateUserRoleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateUserRole", data);
    return promise.then((data) => CreateSuccess.decode(new BinaryReader(data)));
  }

  UpdateUserRole(request: UpdateUserRoleRequest): Promise<UpdateSuccess> {
    const data = UpdateUserRoleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserRole", data);
    return promise.then((data) => UpdateSuccess.decode(new BinaryReader(data)));
  }

  DeleteUserRole(request: DeleteUserRoleRequest): Promise<DeleteSuccess> {
    const data = DeleteUserRoleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUserRole", data);
    return promise.then((data) => DeleteSuccess.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
